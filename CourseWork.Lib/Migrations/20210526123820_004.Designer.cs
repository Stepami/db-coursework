// <auto-generated />
using System;
using CourseWork.Lib;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CourseWork.Lib.Migrations
{
    [DbContext(typeof(CWContext))]
    [Migration("20210526123820_004")]
    partial class _004
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CourseWork.Lib.Entities.Area", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.HasKey("ID");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("CourseWork.Lib.Entities.Course", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Hours")
                        .HasColumnType("int");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("CourseWork.Lib.Entities.Specialization", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AreaID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Laboring")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("AreaID");

                    b.ToTable("Specializations");
                });

            modelBuilder.Entity("CourseWork.Lib.Entities.Trajectory", b =>
                {
                    b.Property<Guid>("ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SpecializationID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("SpecializationID");

                    b.HasIndex("UserID");

                    b.ToTable("Trajectories");
                });

            modelBuilder.Entity("CourseWork.Lib.Entities.TrajectoryElement", b =>
                {
                    b.Property<Guid>("ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CourseID")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<bool>("Passed")
                        .HasColumnType("bit");

                    b.Property<Guid>("TrajectoryID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("CourseID");

                    b.HasIndex("TrajectoryID");

                    b.ToTable("TrajectoryElements");
                });

            modelBuilder.Entity("CourseWork.Lib.Entities.User", b =>
                {
                    b.Property<Guid>("ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CourseWork.Lib.Entities.Course", b =>
                {
                    b.OwnsOne("CourseWork.Lib.Entities.PriceDetail", "PriceDetail", b1 =>
                        {
                            b1.Property<int>("CourseID")
                                .HasColumnType("int");

                            b1.Property<int>("Amount")
                                .HasColumnType("int");

                            b1.Property<string>("Currency")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("CurrencySymbol")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PriceString")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("CourseID");

                            b1.ToTable("Courses");

                            b1.WithOwner()
                                .HasForeignKey("CourseID");
                        });

                    b.Navigation("PriceDetail");
                });

            modelBuilder.Entity("CourseWork.Lib.Entities.Specialization", b =>
                {
                    b.HasOne("CourseWork.Lib.Entities.Area", null)
                        .WithMany("Specializations")
                        .HasForeignKey("AreaID");
                });

            modelBuilder.Entity("CourseWork.Lib.Entities.Trajectory", b =>
                {
                    b.HasOne("CourseWork.Lib.Entities.Specialization", "Specialization")
                        .WithMany()
                        .HasForeignKey("SpecializationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CourseWork.Lib.Entities.User", null)
                        .WithMany("Trajectories")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("CourseWork.Lib.Entities.TrajectoryElement", b =>
                {
                    b.HasOne("CourseWork.Lib.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CourseWork.Lib.Entities.Trajectory", null)
                        .WithMany("TrajectoryElements")
                        .HasForeignKey("TrajectoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("CourseWork.Lib.Entities.Area", b =>
                {
                    b.Navigation("Specializations");
                });

            modelBuilder.Entity("CourseWork.Lib.Entities.Trajectory", b =>
                {
                    b.Navigation("TrajectoryElements");
                });

            modelBuilder.Entity("CourseWork.Lib.Entities.User", b =>
                {
                    b.Navigation("Trajectories");
                });
#pragma warning restore 612, 618
        }
    }
}
